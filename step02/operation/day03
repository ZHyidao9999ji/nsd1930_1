一、Nginx反向代理
[root@web1 ~]# yum  -y  install  httpd
[root@web1 ~]# echo "192.168.2.100" > /var/www/html/index.html
[root@web1 ~]# systemctl restart httpd
web1、web2 做上述同样部署

1.配置Nginx服务器，添加服务器池，实现反向代理功能
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    http {
    .. ..
    upstream webserver {
                    server 192.168.2.100:80;
                    server 192.168.2.200:80;
            }
    .. ..
    server {
            listen        80;
            server_name  localhost;
                location / {
                proxy_pass http://webserver;
            }
    }
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
[root@client ~]# curl http://192.168.4.5            //使用该命令多次访问查看效果

2.配置upstream服务器集群池属性
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf  
    .. ..
    http {
    .. ..
    upstream webserver {
                    server 192.168.2.100 weight=1 max_fails=1 fail_timeout=30;
                    server 192.168.2.200 weight=2 max_fails=2 fail_timeout=30;
                    server 192.168.2.101 down;
            }
    #weight设置服务器权重值，默认值为1
    #max_fails设置最大失败次数
    #fail_timeout设置失败超时时间，单位为秒
    #down标记服务器已关机，不参与集群调度
    .. ..
    server {
            listen        80;
            server_name  localhost;
                location / {
                proxy_pass http://webserver;
            }
    }
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
[root@client ~]# curl http://192.168.4.5            //使用该命令多次访问查看效果

3.配置upstream服务器集群的调度算法
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    http {
    .. ..
    upstream webserver {
    #通过ip_hash设置调度规则为：相同客户端访问相同服务器
                     ip_hash;
                    server 192.168.2.100 weight=1 max_fails=2 fail_timeout=10;
                    server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;
            }
    .. ..
    server {
            listen        80;
            server_name  www.tarena.com;
                location / {
                proxy_pass http://webserver;
            }
    }
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
[root@client ~]# curl http://192.168.4.5            //使用该命令多次访问查看效果
二、Nginx的TCP/UDP调度器
部署支持4层TCP/UDP代理的Nginx服务器
[root@proxy ~]# yum -y install gcc pcre-devel openssl-devel        //安装依赖包
[root@proxy ~]# tar  -xf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd  nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --with-http_ssl_module                                //开启SSL加密功能
> --with-stream                                       //开启4层反向代理功能
[root@proxy nginx-1.12.2]# make && make install           
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    stream {
                upstream backend {
                   server 192.168.2.100:22;            //后端SSH服务器的IP和端口
                   server 192.168.2.200:22;
    }
                server {
                    listen 12345;                    //Nginx监听的端口
                    proxy_connect_timeout 1s;         //连接的超时时间，可选配置
                    proxy_timeout 3s;
                     proxy_pass backend;
                 }
    }
    http {
    .. ..
    }
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
[root@client ~]# ssh 192.168.4.5 -p 12345            //使用该命令多次访问查看效果

三、Nginx常见问题处理
1.自定义报错页面
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
        charset utf-8;                    //仅需要中文时需要改选项，可选项
error_page   404  /404.html;    //自定义错误页面
.. ..
[root@proxy ~]# vim /usr/local/nginx/html/404.html        //生成错误页面
Oops,No NO no page …
[root@proxy ~]# nginx -s reload

2.查看服务器状态信息（非常重要的功能）
[root@proxy nginx-1.12.2]# ./configure   \
> --with-http_ssl_module                        //开启SSL加密功能
> --with-stream                                //开启TCP/UDP代理模块
> --with-http_stub_status_module                //开启status状态页面
[root@proxy nginx-1.12.2]# make && make install    //编译并安装
[root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
    … …
    location /status {
                    stub_status on;
                     #allow IP地址;
                     #deny IP地址;
            }
    … …
[root@proxy ~]# nginx
[root@proxy ~]# curl  http://192.168.4.5/status
    Active connections: 1 
    server accepts handled requests
        10 10 3 
    Reading: 0 Writing: 1 Waiting: 0

3.优化Nginx并发量
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    worker_processes  2;                    //与CPU核心数量一致
    events {
    worker_connections 65535;        //每个worker最大并发连接数
    }
    .. ..
[root@proxy ~]# nginx -s reload
[root@proxy ~]# ulimit -a                        //查看所有属性值
[root@proxy ~]# ulimit -Hn 100000                //设置硬限制（临时规则）
[root@proxy ~]# ulimit -Sn 100000                //设置软限制（临时规则）
[root@proxy ~]# vim /etc/security/limits.conf
    .. ..
*               soft    nofile            100000
*               hard    nofile            100000
[root@proxy ~]# ab -n 2000 -c 2000 http://192.168.4.5/

4.优化Nginx数据包头缓存
[root@proxy ~]# cat lnmp_soft/buffer.sh 
    #!/bin/bash
    URL=http://192.168.4.5/index.html?
    for i in {1..5000}
    do
        URL=${URL}v$i=$i
    done
    curl $URL                                //经过5000次循环后，生成一个长的URL地址栏
    [root@proxy ~]# ./buffer.sh
    .. ..
    <center><h1>414 Request-URI Too Large</h1></center>        //提示头部信息过大
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    http {
    client_header_buffer_size    1k;        //默认请求包头信息的缓存    
    large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
    .. ..
    }
[root@proxy ~]# nginx -s reload
[root@proxy ~]# ./buffer.sh

5.清空firefox本地缓存数据
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
server {
        listen       80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
expires        30d;            //定义客户端缓存时间为30天
}
}
[root@proxy ~]# cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html   //拷一张图片做测试
[root@proxy ~]# nginx -s reload
[root@client ~]# firefox http://192.168.4.5/day.jpg

6.日志切割
[root@proxy ~]#  mv access.log access2.log
[root@proxy ~]# kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)
[root@proxy ~]# vim /usr/local/nginx/logbak.sh
    #!/bin/bash
    date=`date +%Y%m%d`
    logpath=/usr/local/nginx/logs
    mv $logpath/access.log $logpath/access-$date.log
    mv $logpath/error.log $logpath/error-$date.log
    kill -USR1 $(cat $logpath/nginx.pid)
[root@proxy ~]# crontab -e
    03 03 * * 5  /usr/local/nginx/logbak.sh

7.对页面进行压缩处理
[root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
    http {
    .. ..
    gzip on;                            //开启压缩
    gzip_min_length 1000;                //小文件不压缩
    gzip_comp_level 4;                //压缩比率
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                        //对特定文件压缩，类型参考mime.types
    .. ..
    }

8.服务器内存缓存
    http { 
    open_file_cache          max=2000  inactive=20s;
            open_file_cache_valid    60s;
            open_file_cache_min_uses 5;
            open_file_cache_errors   off;
    //设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
    //文件句柄的有效时间是60秒，60秒后过期
    //只有访问次数超过5次会被缓存
    } 
